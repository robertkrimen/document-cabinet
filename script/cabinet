#!/usr/bin/perl

use strict;
use warnings;

use Data::UUID::LibUUID;
use Carp;
use Path::Abstract;
use Document::Stembolt;
use DateTime;
use Document::Cabinet;
use Getopt::Chain;
use Term::Prompt;

local $Term::Prompt::MULTILINE_INDENT = undef;

sub abort(@) {
    print join "", @_, "\n" if @_;
    exit -1;
}

my $cabinet = Document::Cabinet->new;
my $root = $cabinet->var_cabinet_dir;

sub article {

    return unless @_;

    my $folder;
    if (($folder = $_[0]) =~ s/^\.//) {
        shift @_;
    }
    else {
        $folder = "Unfiled";
    }
    $folder = $root->subdir($folder);

    return unless @_;

    my $title = join " ", @_;

    my $uuid = new_uuid_string;
    my $name = $title;
    $name =~ s/[^A-Za-z0-9]/-/g;
    $name =~ s/-+/-/g;
    my $file = join '-', $name, $uuid;
    my $path = $folder->subdir($file);

    return {
        folder => $folder,
        path => $path,
        file => $file,
        title => $title,
        uuid => $uuid,
        name => $name,
    };
}

sub folder_title {

    return unless @_;

    my $folder;
    if (($folder = $_[0]) =~ s/^\.//) {
        shift @_;
    }
    else {
        $folder = "Unfiled";
    }

    return unless @_;

    my $title = join " ", @_;

    return ($folder, $title);
}

sub list {
    my $search = shift;

    $search = scalar $cabinet->model->search(post => {}) unless $search;

    for my $post ($search->search(undef, { order_by => ['cdtime'] })) {
        print join " ", $post->uuid, $post->title;
        print "\n";
    }
}

sub _find {
    my @criteria = @_;

    return unless @criteria;

    my $criteria = $criteria[0];
    my ($folder, $title) = folder_title @criteria;

    my ($search, $post, $count);
    $search = $cabinet->model->search(post =>
        [ 
            { title => $criteria },
            { folder => $folder, title => $title },
            { uuid => { -like => "$criteria%" } },
        ],
        {}
    );

    $count = $search->count;
    ($post) = $search->slice(0, 0) if 1 == $count;

    return wantarray ? ($post, $search, $count) : $post;
}

sub new {
    my ($folder, $title) = @_;

    return $cabinet->new_post($folder, $title);
}

sub find {
    my @criteria = @_;

    unless (@criteria) {
        list;
        return;
    }

    my ($post, $search, $count) = _find @criteria;

    abort "Didn't find any matches for your criteria" unless $count;

    choose $search if $count > 1;

    return $post;
}

sub choose {
    my $search = shift;
    print "Which did you want?\n";
    list $search;
}

Getopt::Chain->process(

    commands => {

        DEFAULT => sub {
            my $context = shift;

            print <<_END_;
Usage: $0 <command>

    new [folder] <title>
    edit <criteria> ...
    trash <criteria> ...
    list 
    assets <key>
    link <key> [path]
    retitle

_END_
        },

        new => sub {
            my $context = shift;
            local @_ = $context->remaining_arguments;

            my ($folder, $title) = folder_title @_ or abort "Wasn't given an article to edit";

            my $post = new $folder, $title;
        },

        edit => sub {
            my $context = shift;
            local @_ = $context->remaining_arguments; # TODO Should pass in remaining arguments

            return list unless @_;

            my ($post, $search, $count) = _find @_;

            if ($post) {
                $cabinet->edit_post($post);
            }
            else {
                return choose $search if $count > 1;
                return unless my ($folder, $title) = folder_title @_;
                if (prompt y => "Post \"$title\" not found. Do you want to start it?", undef, 'N') {
                    my $post = new $folder, $title;
                }
            }
        },

        trash => sub {
            my $context = shift;
            local @_ = $context->remaining_arguments;

            return unless my $post = find @_;

            $cabinet->trash_post($post);
        },

        list => sub {
            my $context = shift;
            local @_ = $context->remaining_arguments;

            my $search;
            (undef, $search) = _find @_ if $_;

            list $search;
        },

        retitle => sub {
            my $context = shift;
            local @_ = $context->remaining_arguments;
        },
        
    },
);
__END__

local $_ = $0;
if (m/\barticle-new$/) {
    my ($folder, $title) = folder_title @ARGV or abort "Wasn't given an article to edit";
    $cabinet->new_post($folder, $title);
}
elsif (m/\barticle-edit$/) {
    my $key = shift @ARGV or goto article_LIST;

    my ($post, $search, $count, $many);
    $count = ($search = $cabinet->model->search(post => { title => $key }))->count;

    if ($count == 1) {
        ($post) = $search->slice(0, 0);
    }
    elsif ($count > 1) {
        $many = $search;
    }
    else {
        $count = ($search = $cabinet->model->search(post => { uuid => { -like => "$key%" } }))->count;
        if ($count == 1) {
            ($post) = $search->slice(0, 0);
        }
        elsif ($count > 1) {
            $many = $search;
        }
        else {
            abort "Didn't find any matches";
        }
    }

    if ($many) {
        print "Which did you want?\n";
        list $many;
    }
    else {
        $cabinet->edit_post($post);
    }


    
#    my $article = article @ARGV or abort "Wasn't given an article to edit";
#    my $document = Document::Stembolt->new(file => $article->{path}->file);
#    unless (-e $document->file) {
#        $document->header->{title} = $article->{title};
#        $document->header->{uuid} = $article->{uuid};
#        $document->header->{cdtime} = DateTime->now->set_time_zone('UTC')->strftime("%F %T %z");
#    }
#    $document->edit;
}
elsif (m/\barticle-list$/) {
article_LIST:
    list scalar $cabinet->model->search(post => {});
}
elsif (m/\barticle-retitle$/) {
}
else {
    abort "Don't know what you want me to do";
}

