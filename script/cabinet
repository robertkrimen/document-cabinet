#!/usr/bin/perl

use strict;
use warnings;

use Data::UUID::LibUUID;
use Carp;
use Path::Abstract;
use Document::Stembolt;
use DateTime;
use Document::Cabinet;
use Getopt::Chain;
use Term::Prompt;
use Text::ASCIITable;

local $Term::Prompt::MULTILINE_INDENT = undef;

sub abort(@) {
    print join "", @_, "\n" if @_;
    exit -1;
}

my $cabinet = Document::Cabinet->new;
my $root = $cabinet->var_cabinet_dir;

sub folder_title {

    return unless @_;

    my $folder;
    if (($folder = $_[0]) =~ s/^\.//) {
        shift @_;
    }
    else {
        $folder = "Unfiled";
    }

    return unless @_;

    my $title = join " ", @_;

    return ($folder, $title);
}

sub list {
    my $search = shift;

    $search = scalar $cabinet->model->search(post => {}) unless $search;
    my @posts = $search->search(undef, { order_by => ['cdtime'] })->all;

    my $tb = Text::ASCIITable->new({ hide_HeadLine => 1 });
    $tb->setCols('', '');
    $tb->addRow($_->uuid, $_->title) for @posts;
    print $tb;
}

sub _find {
    my @criteria = @_;

    return unless @criteria;

    my $criteria = $criteria[0];
    my ($folder, $title) = folder_title @criteria;

    my ($search, $post, $count);
    $search = $cabinet->model->search(post =>
        [ 
            { title => $criteria },
            { folder => $folder, title => $title },
            { uuid => { -like => "$criteria%" } },
        ],
        {}
    );

    $count = $search->count;
    ($post) = $search->slice(0, 0) if 1 == $count;

    return wantarray ? ($post, $search, $count) : $post;
}

sub new {
    my ($folder, $title) = @_;

    return $cabinet->new_post($folder, $title);
}

sub find {
    my @criteria = @_;

    unless (@criteria) {
        list;
        return;
    }

    my ($post, $search, $count) = _find @criteria;

    abort "No post found matching your criteria" unless $count;

    choose $search if $count > 1;

    return $post;
}

sub choose {
    my $search = shift;

    print "Too many posts found matching your criteria\n";

    list $search;
}

Getopt::Chain->process(

    commands => {

        DEFAULT => sub {
            my $context = shift;
            local @_ = $context->remaining_arguments;

            if (defined (my $command = $context->command)) {
                print <<_END_;
Unknown command: $command
_END_
            }

            print <<_END_;
Usage: $0 <command>

    new [folder] <title>
    edit <criteria> ...
    trash <criteria> ...
    list 
    assets <key>
    link <key> [path]
    link-all [path]
    retitle

_END_
            list unless @_;
        },

        new => sub {
            my $context = shift;
            local @_ = $context->remaining_arguments;

            my ($folder, $title) = folder_title @_ or abort "Missing a title";

            my $post = new $folder, $title;
        },

        edit => sub {
            my $context = shift;
            local @_ = $context->remaining_arguments; # TODO Should pass in remaining arguments

            return list unless @_;

            my ($post, $search, $count) = _find @_;

            if ($post) {
                $cabinet->edit_post($post);
            }
            else {
                return choose $search if $count > 1;
                return unless my ($folder, $title) = folder_title @_;
                if (prompt y => "Post \"$title\" not found. Do you want to start it?", undef, 'N') {
                    my $post = new $folder, $title;
                }
            }
        },

        assets => sub {
            my $context = shift;
            local @_ = $context->remaining_arguments;

            return unless my $post = find @_;

            my $assets_dir = $post->assets_dir;

            if (-d $assets_dir) {
                print "$assets_dir already exists\n";
            }
            else {
                $assets_dir->mkpath;
            }
        },

        link => sub {
            my $context = shift;
            local @_ = $context->remaining_arguments;

            return list unless @_;

            my $criteria = shift;

            return unless my $post = find $criteria;

            $post->link(@_);
        },

        'link-all' => sub {
            my $context = shift;
            local @_ = $context->remaining_arguments;

            return list unless @_;

            my @posts = $cabinet->model->search(post => {});
            for (@posts) {
                $_->link(@_);
            }
        },
        trash => sub {
            my $context = shift;
            local @_ = $context->remaining_arguments;

            return unless my $post = find @_;

            my $title = $post->title;
            if (prompt y => "Are you sure you want to trash \"$title\"?", undef, 'N') {
                $cabinet->trash_post($post);
            }
        },

        list => sub {
            my $context = shift;
            local @_ = $context->remaining_arguments;

            my $search;
            (undef, $search) = _find @_ if $_;

            list $search;
        },

        retitle => sub {
            my $context = shift;
            local @_ = $context->remaining_arguments;
        },
        
    },
);
